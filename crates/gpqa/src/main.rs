use anyhow::Result;
use clap::Parser;
use egobox_moe::GpMixture;
use egobox_moe::MixtureGpSurrogate;
use rayon::prelude::*;
use std::fs;

#[derive(Parser)]
#[command(author, version, about, long_about = None)]
struct Args {
    /// Binary GP file generated by Egor optimizer
    filename: String,

    /// Use leave one out cross validation procedure
    #[arg(short, long, default_value_t = false)]
    loo: bool,

    /// Use K folding cross validation procedure
    #[arg(short, long, default_value = "10")]
    kfold: usize,
}

struct Metrics {
    pub q2: f64,
    pub pva: f64,
}

fn compute_metrics(gp_models: &[Box<dyn MixtureGpSurrogate>], kfold: usize) -> Vec<Metrics> {
    let mut res: Vec<_> = gp_models
        .par_iter()
        .enumerate()
        .map(|(i, gp)| {
            let q2 = gp.as_ref().q2(kfold);
            let pva = gp.as_ref().pva(kfold);
            (i, Metrics { q2, pva })
        })
        .collect();
    // Sort by index
    res.sort_by_key(|(i, _)| *i);
    res.into_iter().map(|(_, m)| m).collect::<Vec<_>>()
}

fn main() -> Result<()> {
    let args = Args::parse();

    let data: Vec<u8> = fs::read(&args.filename)?;

    // Try to load a vector of GP models (Egor optimizer save)
    let gp_models: Vec<Box<dyn MixtureGpSurrogate>> =
        bincode::serde::decode_from_slice(&data, bincode::config::standard())
            .map(|(res, _)| res)
            .unwrap_or_default();

    let gp_models = if gp_models.is_empty() {
        // Try to load a single GP model (Gpx save)
        let gp: Box<GpMixture> =
            bincode::serde::decode_from_slice(&data, bincode::config::standard())
                .map(|(res, _)| res)?;
        vec![gp as Box<dyn MixtureGpSurrogate>]
    } else {
        gp_models
    };

    println!(
        "Loaded {} GP model(s) from {}",
        gp_models.len(),
        args.filename
    );

    let (xt, _yt) = gp_models.first().unwrap().training_data();
    println!("Training data: {} samples ({}-dim)", xt.nrows(), xt.ncols());

    println!(
        "Computing Q2 and PVA with {}-fold cross-validation...",
        if args.loo { xt.nrows() } else { args.kfold }
    );

    let k = if args.loo { xt.nrows() } else { args.kfold };
    let res: Vec<_> = compute_metrics(&gp_models, k);

    for (i, m) in res.iter().enumerate() {
        println!("GP({}): Q2 = {:.6}, PVA = {:.6}", i, m.q2, m.pva);
    }

    Ok(())
}

use anyhow::Result;
use clap::Parser;
use egobox_moe::MixtureGpSurrogate;
use rayon::prelude::*;
use std::fs;

#[derive(Parser)]
#[command(author, version, about, long_about = None)]
struct Args {
    /// Binary GP file generated by Egor optimizer
    filename: String,

    /// Use leave one out cross validation procedure
    #[arg(short, long, default_value_t = false)]
    loo: bool,

    /// Use K folding cross validation procedure
    #[arg(short, long, default_value = "5")]
    kfold: usize,
}

fn main() -> Result<()> {
    let args = Args::parse();

    let data: Vec<u8> = fs::read(&args.filename)?;
    let gp_models: Vec<Box<dyn MixtureGpSurrogate>> = bincode::deserialize(&data[..])?;

    let _res: Vec<_> = gp_models
        .par_iter()
        .enumerate()
        .map(|(i, gp)| {
            let nrmse = if args.loo {
                gp.as_ref().loocv()
            } else {
                gp.as_ref().cv(args.kfold)
            };
            let n = gp.training_data().0.nrows();
            let mean = gp.training_data().1.mean().unwrap();
            println!(
                "GP({}): nbpts={}, mean={}, RMSE={}, NRMSE={}",
                i,
                n,
                mean,
                mean * nrmse,
                nrmse
            );
        })
        .collect();

    Ok(())
}
